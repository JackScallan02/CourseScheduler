
import java.sql.Timestamp;
import java.util.ArrayList;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author acv
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    private String currentSemester; 
    
    public MainFrame() {
        initComponents();
        rebuildSemesterComboBoxes();
        rebuildStudentComboBoxes();
        rebuildCourseComboBoxes();
        rebuildSpecificStudentComboBox();
        
       
        
    }
    
    public void updateCourseDisplay() {
        ArrayList<CourseEntry> courses = CourseQueries.getAllCourses(currentSemester);
        
        displayCoursesTextArea.setText("Course Code\tSeats\tDescription\n");
        for (CourseEntry course: courses) {
            displayCoursesTextArea.append("\n" + course.getCourseCode() + "\t" + course.getSeats() + "\t" + course.getCourseDescription());
        }
    }
    
    public void rebuildSpecificStudentComboBox() {
        String selectedStudent = (String)(selectedStudentComboBox_dropCourse.getSelectedItem());
        String studentID = getIDByName(selectedStudent);
        ArrayList<ScheduleEntry> schedule = ScheduleQueries.getScheduleByStudent(currentSemester, studentID);
        ArrayList<String> courseCodes = new ArrayList<>();
        for (ScheduleEntry scheduleEntry: schedule) {
            courseCodes.add(scheduleEntry.getCourseCode());
        }
        dropCourseComboBox_Student.setModel(new javax.swing.DefaultComboBoxModel(courseCodes.toArray()));
    }
    
    public void rebuildSemesterComboBoxes()
            
    {
        currentSemester = String.valueOf(currentSemesterComboBox.getSelectedItem());
        ArrayList<String> semesters = SemesterQueries.getSemesterList();
        currentSemesterComboBox.setModel(new javax.swing.DefaultComboBoxModel(semesters.toArray()));
        if (semesters.size() > 0) {
            currentSemester = (String)(currentSemesterComboBox.getSelectedItem());
            
            ArrayList<CourseEntry> courses = CourseQueries.getAllCourses(currentSemester);
            displayCoursesTextArea.setText("Course Code\tSeats\tDescription\n");
            for (CourseEntry course: courses) {
                displayCoursesTextArea.append(course.getCourseCode() + "\t" + course.getSeats() + "\t" + course.getCourseDescription() + "\n");
            }
            currentSemesterLabel.setText(currentSemester);
        }
        
        
        
        else
        {
            currentSemesterLabel.setText("None, add a semester.");
            currentSemester = "None";
            currentSemesterComboBox.removeAllItems();
        }
    }
    
    public void rebuildStudentComboBoxes() {
        ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
        ArrayList<String> studentNames = new ArrayList<String>();
        
        for (StudentEntry student: students) {
            studentNames.add(student.getLastName() + ", " + student.getFirstName());
        }
        
        
        selectStudentComboBox_scheduleCourses.setModel(new javax.swing.DefaultComboBoxModel(studentNames.toArray()));
        selectStudentComboBox_displaySchedule.setModel(new javax.swing.DefaultComboBoxModel(studentNames.toArray()));
        selectStudentComboBox_dropStudent.setModel(new javax.swing.DefaultComboBoxModel(studentNames.toArray()));
        selectedStudentComboBox_dropCourse.setModel(new javax.swing.DefaultComboBoxModel(studentNames.toArray()));
        
    }
    
    public void rebuildCourseComboBoxes() {

        ArrayList<String> courseCodes = CourseQueries.getAllCourseCodes(currentSemester);
        selectCourseComboBox.setModel(new javax.swing.DefaultComboBoxModel(courseCodes.toArray()));
        selectedCourseComboBox_DisplayCourseEnrollments.setModel(new javax.swing.DefaultComboBoxModel(courseCodes.toArray()));
        dropCourseComboBox_Admin.setModel(new javax.swing.DefaultComboBoxModel(courseCodes.toArray()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jRadioButton1 = new javax.swing.JRadioButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        addSemesterTextfield = new javax.swing.JTextField();
        addSemesterSubmitButton = new javax.swing.JButton();
        addSemesterStatusLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        courseCodeTextField = new javax.swing.JTextField();
        courseDescriptionTextField = new javax.swing.JTextField();
        seatsSpinner = new javax.swing.JSpinner();
        courseSubmitButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        addCourseLabel = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        lastNameTextField = new javax.swing.JTextField();
        studentIDTextField = new javax.swing.JTextField();
        firstNameTextField = new javax.swing.JTextField();
        studentSubmitButton = new javax.swing.JButton();
        studentAddedLabel = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        selectedCourseComboBox_DisplayCourseEnrollments = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        displayCourseEnrollmentsTextArea = new javax.swing.JTextArea();
        displayButton_displayCourseEnrollments = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        selectStudentComboBox_dropStudent = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        submitButton_dropStudent = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        dropTextArea = new javax.swing.JTextArea();
        jPanel11 = new javax.swing.JPanel();
        dropCourseComboBox_Admin = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        dropCourseButton_Admin = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        dropCourseTextArea_Admin = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        dropCoursePanel = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        displayCoursesTextArea = new javax.swing.JTextArea();
        jPanel7 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        scheduleCoursesSubmitButton = new javax.swing.JButton();
        selectStudentComboBox_scheduleCourses = new javax.swing.JComboBox<>();
        selectCourseComboBox = new javax.swing.JComboBox<>();
        scheduleCoursesLabel = new javax.swing.JLabel();
        scheduleCoursesSuccessLabel = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        selectStudentComboBox_displaySchedule = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayScheduleTextArea = new javax.swing.JTextArea();
        displayScheduleButton = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        dropCourseComboBox_Student = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        dropCourseTextArea_Student = new javax.swing.JTextArea();
        dropCourseSubmitButton_Student = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        selectedStudentComboBox_dropCourse = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        currentSemesterLabel = new javax.swing.JLabel();
        currentSemesterComboBox = new javax.swing.JComboBox<>();
        changeSemesterButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jRadioButton1.setText("jRadioButton1");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel3.setText("Semester Name:");

        addSemesterTextfield.setColumns(20);
        addSemesterTextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSemesterTextfieldActionPerformed(evt);
            }
        });

        addSemesterSubmitButton.setText("Submit");
        addSemesterSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSemesterSubmitButtonActionPerformed(evt);
            }
        });

        addSemesterStatusLabel.setText("                                                   ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addSemesterStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addSemesterTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(addSemesterSubmitButton)))
                .addContainerGap(401, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(addSemesterTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addSemesterSubmitButton)
                .addGap(47, 47, 47)
                .addComponent(addSemesterStatusLabel)
                .addContainerGap(141, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Add Semester", jPanel3);

        jLabel4.setText("Course Code:");

        jLabel5.setText("Course Description:");

        jLabel6.setText("Seats:");

        courseCodeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseCodeTextFieldActionPerformed(evt);
            }
        });

        courseDescriptionTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseDescriptionTextFieldActionPerformed(evt);
            }
        });

        courseSubmitButton.setText("Submit");
        courseSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseSubmitButtonActionPerformed(evt);
            }
        });

        addCourseLabel.setText("         ");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel4)))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(jLabel7)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(courseSubmitButton)
                            .addComponent(courseCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(courseDescriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(seatsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(addCourseLabel)))
                .addContainerGap(509, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(courseCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(courseDescriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(seatsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(courseSubmitButton)
                .addGap(40, 40, 40)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(addCourseLabel)
                .addGap(0, 48, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Add Course", jPanel4);

        jLabel8.setText("Student ID:");

        jLabel9.setText("First Name:");

        jLabel10.setText("Last Name:");

        lastNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastNameTextFieldActionPerformed(evt);
            }
        });

        studentIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentIDTextFieldActionPerformed(evt);
            }
        });

        firstNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameTextFieldActionPerformed(evt);
            }
        });

        studentSubmitButton.setText("Submit");
        studentSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentSubmitButtonActionPerformed(evt);
            }
        });
        studentSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentSubmitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8)
                            .addComponent(jLabel10))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(studentSubmitButton)
                            .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(studentIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(studentAddedLabel)))
                .addContainerGap(498, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(studentIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(studentSubmitButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addComponent(studentAddedLabel)
                .addGap(18, 18, 18))
        );

        jTabbedPane2.addTab("Add Student", jPanel5);

        jLabel15.setText("Selected Course:");

        selectedCourseComboBox_DisplayCourseEnrollments.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        displayCourseEnrollmentsTextArea.setColumns(20);
        displayCourseEnrollmentsTextArea.setRows(5);
        displayCourseEnrollmentsTextArea.setEnabled(false);
        jScrollPane3.setViewportView(displayCourseEnrollmentsTextArea);

        displayButton_displayCourseEnrollments.setText("Display");
        displayButton_displayCourseEnrollments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayButton_displayCourseEnrollmentsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(displayButton_displayCourseEnrollments)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 762, Short.MAX_VALUE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectedCourseComboBox_DisplayCourseEnrollments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(selectedCourseComboBox_DisplayCourseEnrollments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(displayButton_displayCourseEnrollments)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Display Course Enrollments", jPanel10);

        selectStudentComboBox_dropStudent.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        selectStudentComboBox_dropStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectStudentComboBox_dropStudentActionPerformed(evt);
            }
        });

        jLabel14.setText("Select student:");

        submitButton_dropStudent.setText("Submit");
        submitButton_dropStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButton_dropStudentActionPerformed(evt);
            }
        });

        dropTextArea.setColumns(20);
        dropTextArea.setRows(5);
        dropTextArea.setEnabled(false);
        jScrollPane4.setViewportView(dropTextArea);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addComponent(selectStudentComboBox_dropStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(submitButton_dropStudent)
                .addContainerGap(470, Short.MAX_VALUE))
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectStudentComboBox_dropStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(submitButton_dropStudent))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Drop Student", jPanel9);

        dropCourseComboBox_Admin.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dropCourseComboBox_Admin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropCourseComboBox_AdminActionPerformed(evt);
            }
        });

        jLabel16.setText("Select Course:");

        dropCourseButton_Admin.setText("Submit");
        dropCourseButton_Admin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropCourseButton_AdminActionPerformed(evt);
            }
        });

        dropCourseTextArea_Admin.setColumns(20);
        dropCourseTextArea_Admin.setRows(5);
        dropCourseTextArea_Admin.setEnabled(false);
        jScrollPane5.setViewportView(dropCourseTextArea_Admin);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dropCourseButton_Admin)
                            .addComponent(dropCourseComboBox_Admin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 556, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dropCourseComboBox_Admin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dropCourseButton_Admin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Drop Course", jPanel11);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Admin", jPanel1);

        dropCoursePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dropCoursePanelMouseClicked(evt);
            }
        });

        displayCoursesTextArea.setColumns(20);
        displayCoursesTextArea.setRows(5);
        displayCoursesTextArea.setEnabled(false);
        jScrollPane2.setViewportView(displayCoursesTextArea);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 756, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(344, Short.MAX_VALUE))
        );

        dropCoursePanel.addTab("Display Courses", jPanel6);

        jLabel11.setText("Select Course:");

        jLabel12.setText("Select Student:");

        scheduleCoursesSubmitButton.setText("Submit");
        scheduleCoursesSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleCoursesSubmitButtonActionPerformed(evt);
            }
        });

        selectStudentComboBox_scheduleCourses.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        selectCourseComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        scheduleCoursesSuccessLabel.setText("                                 ");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(selectCourseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scheduleCoursesSubmitButton)
                            .addComponent(selectStudentComboBox_scheduleCourses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scheduleCoursesSuccessLabel)
                            .addComponent(scheduleCoursesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)))
                .addContainerGap(582, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(selectCourseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(selectStudentComboBox_scheduleCourses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(scheduleCoursesSubmitButton)
                .addGap(26, 26, 26)
                .addComponent(scheduleCoursesLabel)
                .addGap(18, 18, 18)
                .addComponent(scheduleCoursesSuccessLabel)
                .addContainerGap(340, Short.MAX_VALUE))
        );

        dropCoursePanel.addTab("Schedule Courses", jPanel7);

        jLabel13.setText("Selected Student:");

        selectStudentComboBox_displaySchedule.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        displayScheduleTextArea.setColumns(20);
        displayScheduleTextArea.setRows(5);
        displayScheduleTextArea.setEnabled(false);
        jScrollPane1.setViewportView(displayScheduleTextArea);

        displayScheduleButton.setText("Display");
        displayScheduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayScheduleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 756, Short.MAX_VALUE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectStudentComboBox_displaySchedule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(displayScheduleButton))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(selectStudentComboBox_displaySchedule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(displayScheduleButton)
                .addContainerGap(253, Short.MAX_VALUE))
        );

        dropCoursePanel.addTab("Display Schedule", jPanel8);

        dropCourseComboBox_Student.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel17.setText("Select Course:");

        dropCourseTextArea_Student.setColumns(20);
        dropCourseTextArea_Student.setRows(5);
        dropCourseTextArea_Student.setEnabled(false);
        jScrollPane6.setViewportView(dropCourseTextArea_Student);

        dropCourseSubmitButton_Student.setText("Submit");
        dropCourseSubmitButton_Student.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropCourseSubmitButton_StudentActionPerformed(evt);
            }
        });

        jLabel18.setText("Selected Student:");

        selectedStudentComboBox_dropCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        selectedStudentComboBox_dropCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedStudentComboBox_dropCourseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(dropCourseComboBox_Student, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dropCourseSubmitButton_Student)
                                    .addComponent(selectedStudentComboBox_dropCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dropCourseComboBox_Student, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(selectedStudentComboBox_dropCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dropCourseSubmitButton_Student)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        dropCoursePanel.addTab("Drop Course", jPanel12);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dropCoursePanel, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(dropCoursePanel)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Student", jPanel2);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel2.setText("Current Semester: ");

        currentSemesterLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 16)); // NOI18N
        currentSemesterLabel.setText("           ");

        currentSemesterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        changeSemesterButton.setText("Change Semester");

        jLabel1.setFont(new java.awt.Font("Lantinghei SC", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 153, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Course Scheduler");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentSemesterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(currentSemesterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(changeSemesterButton)
                        .addGap(111, 111, 111)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(255, 255, 255)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(currentSemesterLabel)
                    .addComponent(currentSemesterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changeSemesterButton))
                .addGap(12, 12, 12)
                .addComponent(jTabbedPane1))
        );

        changeSemesterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeSemesterButtonActionPerformed(evt);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    

    
    
    
    
    
    
    
    private void addSemesterSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSemesterSubmitButtonActionPerformed
        String semester = addSemesterTextfield.getText();
        if (!semester.isBlank()) {
            SemesterQueries.addSemester(semester);
            addSemesterStatusLabel.setText("Semester " + semester + " has been added.");
            rebuildSemesterComboBoxes();
        }
        
    }//GEN-LAST:event_addSemesterSubmitButtonActionPerformed

    private void courseCodeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseCodeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_courseCodeTextFieldActionPerformed

    private void courseDescriptionTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseDescriptionTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_courseDescriptionTextFieldActionPerformed
    
    private void changeSemesterButtonActionPerformed(java.awt.event.ActionEvent evt) {
        
        currentSemester = String.valueOf(currentSemesterComboBox.getSelectedItem());
        
        ArrayList<CourseEntry> courses = CourseQueries.getAllCourses(currentSemester);
        displayCoursesTextArea.setText("Course Code\tSeats\tDescription\n");
        for (CourseEntry course: courses) {
            displayCoursesTextArea.append(course.getCourseCode() + "\t" + course.getSeats() + "\t" + course.getCourseDescription() + "\n");
            
        }
        
        ArrayList<String> semesters = SemesterQueries.getSemesterList();
        if (semesters.size() != 0) {
            currentSemesterLabel.setText((String)(currentSemesterComboBox.getSelectedItem()));
        }
        
        
        rebuildCourseComboBoxes();
        rebuildSpecificStudentComboBox();
    }
    private void courseSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseSubmitButtonActionPerformed
        // TODO add your handling code here:
      
//        rebuildSemesterComboBoxes();
      
        String courseCode = courseCodeTextField.getText();
        String courseDescription = courseDescriptionTextField.getText();
        int seatsInt = (Integer)seatsSpinner.getValue();
        String seats = String.valueOf(seatsInt);
        
        if (!courseCode.isBlank() && !courseDescription.isBlank()) {
            displayCoursesTextArea.append(courseCode + "\t" + seats + "\t" + courseDescription + "\n");
            CourseQueries.addCourse(new CourseEntry(currentSemester, courseCode, courseDescription, seatsInt));
   
            addCourseLabel.setText("Course " + courseCode + " has been added.");
            rebuildCourseComboBoxes();
        }
        
        
        updateCourseDisplay();
        
        
    }//GEN-LAST:event_courseSubmitButtonActionPerformed

    
    
    private void addSemesterTextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSemesterTextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addSemesterTextfieldActionPerformed

    private void lastNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lastNameTextFieldActionPerformed

    private void studentIDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentIDTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studentIDTextFieldActionPerformed

    private void firstNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameTextFieldActionPerformed

    private void studentSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentSubmitButtonActionPerformed
        String studentID = studentIDTextField.getText();
        String firstName = firstNameTextField.getText();
        String lastName = lastNameTextField.getText();
        
        if (!studentID.isBlank() && !firstName.isBlank() && !lastName.isBlank()) {
            ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
        
            boolean add = true;
            for (StudentEntry student: students) {
                if (student.getStudentID().equals(studentID)) {
                add = false;
                }
            }
            if (add) {
                StudentQueries.addStudent(new StudentEntry(studentID, firstName, lastName));
            }
        
            studentAddedLabel.setText("Student " + lastName + ", " + firstName + " has been added.");
            rebuildStudentComboBoxes();            
        }

    }//GEN-LAST:event_studentSubmitButtonActionPerformed

    private void displayScheduleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayScheduleButtonActionPerformed
        // TODO add your handling code here:

        String name = (String)(selectStudentComboBox_displaySchedule.getSelectedItem());

        if (selectStudentComboBox_displaySchedule.getItemCount() == 0) {
            return;
        }
        String[] studentList = name.split(", ");

        String lastName = studentList[0];
        String firstName = studentList[1];

        StudentEntry mySelectedStudent;
        String studentID = "";
        ArrayList<StudentEntry> students = new ArrayList<>();

        students = StudentQueries.getAllStudents();

        for (StudentEntry student: students) {
            if (student.getFirstName().equals(firstName) && student.getLastName().equals(lastName)) {
                mySelectedStudent = student;
                studentID = mySelectedStudent.getStudentID();
            }
        }

        displayScheduleTextArea.setText("Course Code\tStatus\t\n");
        ArrayList<ScheduleEntry> schedule = ScheduleQueries.getScheduleByStudent(currentSemester, studentID);
        for (ScheduleEntry entry: schedule) {
            String myCourseCode = entry.getCourseCode();
            String status = entry.getStatus();
            displayScheduleTextArea.append(myCourseCode + "\t" + status + "\n");
        }
    }//GEN-LAST:event_displayScheduleButtonActionPerformed

    private void scheduleCoursesSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleCoursesSubmitButtonActionPerformed
        // TODO add your handling code here:

        if (selectCourseComboBox.getItemCount() == 0 || selectStudentComboBox_scheduleCourses.getItemCount() == 0) {
            return;
        }
        String selectedCourse = (String)(selectCourseComboBox.getSelectedItem());

        String selectedStudent = (String)(selectStudentComboBox_scheduleCourses.getSelectedItem());

        String[] studentList = selectedStudent.split(", ");


        String lastName = studentList[0];
        String firstName = studentList[1];

        String courseID = selectedCourse;

        String studentID = getIDByName(selectedStudent);

        CourseEntry mySelectedCourse;
        ArrayList<CourseEntry> courses = new ArrayList<>();
        for (CourseEntry course: courses) {
            if (course.getCourseCode().equals(courseID)) {
                mySelectedCourse = course;
            }
        }

        //status

        int seats = CourseQueries.getCourseSeats(currentSemester, courseID);



        String status = "Enrolled";
        if (seats == 0) {
            status = "Waitlisted";
        }

        Timestamp timeStamp = new Timestamp(0, 0, 0, 0, 0, 0, 0);


        ArrayList<ScheduleEntry> schedules = ScheduleQueries.getScheduleByStudent(currentSemester, studentID);

        ScheduleEntry entry = new ScheduleEntry(currentSemester, studentID, courseID, status, timeStamp);

        for (ScheduleEntry entry1: schedules) {
            if (entry1.getCourseCode().equals(entry.getCourseCode())) {
                System.out.println("Student already scheduled");
                scheduleCoursesSuccessLabel.setText("Student " + lastName + ", " + firstName + " already scheduled");
                return;
            }
        }

        ScheduleQueries.addScheduleEntry(entry);

        if (status == "Waitlisted") {
            scheduleCoursesSuccessLabel.setText("Student " + lastName + ", " + firstName + " waitlisted");
        } else {
            scheduleCoursesSuccessLabel.setText("Student " + lastName + ", " + firstName + " enrolled");
            CourseQueries.lowerSeats(currentSemester, courseID);
            updateCourseDisplay();
        }
        
        
        rebuildSpecificStudentComboBox();
    }//GEN-LAST:event_scheduleCoursesSubmitButtonActionPerformed
    
    public ArrayList<String> getNameByID(String StudentID) {
        
        ArrayList<String> name = new ArrayList<>();
        
        ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
        
//        System.out.println("Student ID: " + StudentID);

        
        for (StudentEntry student: students) {
            if (student.getStudentID().equals(StudentID)) {
                
                name.add(student.getFirstName());
                name.add(student.getLastName());
            }
        }
        
        return name;
    }
    
    public String getIDByName(String name) {
        
        try {
            StudentEntry mySelectedStudent;
            String studentID = "";
            ArrayList<StudentEntry> students = new ArrayList<>();

            students = StudentQueries.getAllStudents();
        
            String[] studentList = name.split(", ");
        
            String lastName = studentList[0];
            String firstName = studentList[1];
        

            for (StudentEntry student: students) {
                if (student.getFirstName().equals(firstName) && student.getLastName().equals(lastName)) {
                    mySelectedStudent = student;
                    studentID = mySelectedStudent.getStudentID();
                }
            }
            return studentID;
        } catch(Exception e) {
            return "";
        }
        
        
    }
    
    
    
    private void displayButton_displayCourseEnrollmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayButton_displayCourseEnrollmentsActionPerformed
        // TODO add your handling code here:
        displayCourseEnrollmentsTextArea.setText("");
        
        String courseCode = (String)(selectedCourseComboBox_DisplayCourseEnrollments.getSelectedItem());
        
        
        ArrayList<ScheduleEntry> schedules = new ArrayList<>();
        
        schedules = ScheduleQueries.getScheduledStudentsByCourse(currentSemester, courseCode);
        
        ArrayList<ScheduleEntry> waitList = new ArrayList<>();
        
        displayCourseEnrollmentsTextArea.selectAll();
        displayCourseEnrollmentsTextArea.replaceSelection("");
        displayCourseEnrollmentsTextArea.append("Name\tStudent ID\tStatus\n");
        
        
        
        
        for (ScheduleEntry scheduleEntry: schedules) {
            if ((scheduleEntry.getStatus()).equals("Enrolled")) {
                ArrayList<String> name = getNameByID(scheduleEntry.getStudentID());
                displayCourseEnrollmentsTextArea.append(name.get(0) + " " + name.get(1) + "\t" + scheduleEntry.getStudentID() + "\t" + scheduleEntry.getStatus() + "\n");
                
            } else {
                waitList.add(scheduleEntry);
            }
            
        }
        
        for (ScheduleEntry scheduleEntry: waitList) {
            ArrayList<String> name = getNameByID(scheduleEntry.getStudentID());
            displayCourseEnrollmentsTextArea.append(name.get(0) + " " + name.get(1) + "\t" + scheduleEntry.getStudentID() + "\t" + scheduleEntry.getStatus() + "\n");
        }
    }//GEN-LAST:event_displayButton_displayCourseEnrollmentsActionPerformed

    private void selectStudentComboBox_dropStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectStudentComboBox_dropStudentActionPerformed
        // TODO add your handling code here:
        
        rebuildSpecificStudentComboBox();
    }//GEN-LAST:event_selectStudentComboBox_dropStudentActionPerformed

    
    
    private ArrayList<String> getAllSemesters() {
        ArrayList<String> allSemesters = new ArrayList<>();
        int size = currentSemesterComboBox.getItemCount();
        for (int i = 0; i < size; i++) {
            String item = currentSemesterComboBox.getItemAt(i);
            allSemesters.add(item);
        }
        return allSemesters;
    }
    
    
    
    
    private void submitButton_dropStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButton_dropStudentActionPerformed
        // TODO add your handling code here:
        dropTextArea.setText("");
        
        String selectedStudent = (String)(selectStudentComboBox_dropStudent.getSelectedItem());
        
        if (selectedStudent == null) {
            return;
        }
        
        String studentID = getIDByName(selectedStudent);
        
        StudentQueries.dropStudent(studentID);
        dropTextArea.setText(selectedStudent + " has been dropped. ");
        rebuildSpecificStudentComboBox();
        
        
        //Get all semesters
        ArrayList<String> allSemesters = getAllSemesters();
        

        
        
        //Get all courses student is enrolled in
        //Get all students for each class
        //Check for first waitlisted student by iterating through each list of students
        //Change waitlist status to enrolled of that student
        
        
        /*
        pseudocode
        courseCodes = allCourseCodes()
        for course in courseCodes:
            students = getAllStudents(course)
            for student in students:
                if student.getStatus() = waitlisted
                    student.setStatus("enrolled")
                    break
        */
        

        
        //iterate through every semester
        for (String semester: allSemesters) {            
            
            //Get the schedule for current semester for given student
            ArrayList<ScheduleEntry> studentSchedule = ScheduleQueries.getScheduleByStudent(semester, studentID);
            
            //If dropped student was waitlisted, no further action is needed for that course
            for (int i = 0; i < studentSchedule.size(); i++) {
                if (studentSchedule.get(i).getStatus().equals("Waitlisted")) {
                    dropTextArea.append("\n" + selectedStudent + ", " + studentSchedule.get(i).getStudentID() + ", has been removed from the waitlist of " + studentSchedule.get(i).getCourseCode() + " for semester " + semester);
                    studentSchedule.remove(i);
                }
            }
            
            //Delete that schedule
            ScheduleQueries.deleteScheduleByStudent(semester, studentID);
            //Create a list of coursecodes from that schedule of that student
            ArrayList<String> courseCodes = new ArrayList<>();
            for (ScheduleEntry scheduleEntry: studentSchedule) {
                courseCodes.add(scheduleEntry.getCourseCode());
                dropTextArea.append("\n" + selectedStudent + ", " + scheduleEntry.getStudentID() + ", has been removed from " + scheduleEntry.getCourseCode() + " for semester " + semester);
                       
                CourseQueries.raiseSeats(currentSemester, scheduleEntry.getCourseCode());
                
            }
            updateCourseDisplay();
            
            
            //Iterate through every coursecode that the student was enrolled in from given semester
            for (String courseCode: courseCodes) {
                
                //Create a list of every schedule with given coursecode
                ArrayList<ScheduleEntry> schedules = ScheduleQueries.getScheduledStudentsByCourse(semester, courseCode);
                
                //iterate through every schedule that has that course code
                for (ScheduleEntry scheduleEntry: schedules) {
                    if (scheduleEntry.getStatus().equals("Waitlisted")) {
                        ScheduleQueries.setStatus(scheduleEntry.getStudentID(), "Enrolled", scheduleEntry.getCourseCode());
                        ArrayList<String> name = getNameByID(scheduleEntry.getStudentID());
                        String firstName = name.get(0);
                        String lastName = name.get(1);
                        dropTextArea.append("\n" + firstName + " " + lastName  + ", " + scheduleEntry.getStudentID() + ", has been enrolled in " + courseCode + " for semester " + semester);
                        CourseQueries.lowerSeats(currentSemester, scheduleEntry.getCourseCode());
                        updateCourseDisplay();
                        break;
                        
                        
                    }
                }
            }
            dropTextArea.append("\n");
        }
        
        

        dropTextArea.append("\n" + selectedStudent + " has been removed from all the student combo boxes.");
    
        rebuildStudentComboBoxes();
        
        
        
    }//GEN-LAST:event_submitButton_dropStudentActionPerformed

    private void dropCourseButton_AdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropCourseButton_AdminActionPerformed
        // TODO add your handling code here:
        
       
        
        dropCourseTextArea_Admin.setText("");
        
        String selectedCourse = (String)(dropCourseComboBox_Admin.getSelectedItem());
        
        if (selectedCourse == null) {
            return;
        }
        
        dropCourseTextArea_Admin.append(selectedCourse + " has been removed.");
        
        //Get all schedules
        //Remove all schedules with dropped coursecode
        
       
        //  for schedule in allSchedules:
        //      if (schedule.courseCode().equals(dropped coursecode))
        //          delete schedule item
        //
        
        
        
            
            //All schedules for semester
            ArrayList<ScheduleEntry> allSchedules = ScheduleQueries.getAllSchedules(currentSemester);
            
        for (ScheduleEntry scheduleEntry: allSchedules) {
            if (scheduleEntry.getCourseCode().equals(selectedCourse)) {
                    ScheduleQueries.deleteScheduleItem(currentSemester, selectedCourse);
                    
                    ArrayList<String> name = getNameByID(scheduleEntry.getStudentID());
                    String firstName = name.get(0);
                    String lastName = name.get(1);
                    
                    if (scheduleEntry.getStatus().equals("Enrolled")) {
                        dropCourseTextArea_Admin.append("\n" + firstName + " " + lastName + " has been removed from " + selectedCourse + ".");
                    } else {
                        dropCourseTextArea_Admin.append("\n" + firstName + " " + lastName + " has been removed from the waitlist of " + selectedCourse + ".");
                    }
                    
                    
            }
        }
            
        CourseQueries.deleteCourse(currentSemester, selectedCourse);
        
        
        //Update course list display
        
        updateCourseDisplay();
        
        
        
        
        
        
        
        
        
        
        rebuildCourseComboBoxes();
        
        
        
        
        
    }//GEN-LAST:event_dropCourseButton_AdminActionPerformed

    
    
    
    
    
    
    private void dropCourseComboBox_AdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropCourseComboBox_AdminActionPerformed
        // TODO add your handling code here:
        
        rebuildSpecificStudentComboBox();
    }//GEN-LAST:event_dropCourseComboBox_AdminActionPerformed

    private void dropCourseSubmitButton_StudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropCourseSubmitButton_StudentActionPerformed
        // TODO add your handling code here:
        
        dropCourseTextArea_Student.setText("");
        
        String selectedCourse = (String)(dropCourseComboBox_Student.getSelectedItem());
        
        
        
        
        
        //Get scheduleEntry by student
        //Remove course
        //Enroll next waitlisted person
        //Display changes
        
        
        String selectedStudent = (String)(selectedStudentComboBox_dropCourse.getSelectedItem());
        String studentID = getIDByName(selectedStudent);
        
        
        ArrayList<ScheduleEntry> studentSchedule = ScheduleQueries.getScheduleByStudent(currentSemester, studentID);
        for (ScheduleEntry schedule: studentSchedule) {
            if (schedule.getCourseCode().equals(selectedCourse)) {
                if (schedule.getStatus().equals("Enrolled")) {
                    dropCourseTextArea_Student.append(selectedCourse + " has been dropped for " + selectedStudent + ", " + schedule.getStudentID() + ".");
                    CourseQueries.raiseSeats(currentSemester, schedule.getCourseCode());
                    updateCourseDisplay();
                } else {
                    dropCourseTextArea_Student.append("You have been unwaitlisted from " + selectedCourse + ".");
                }
            }
        }
        
        
        
        ScheduleQueries.deleteScheduleItemByStudent(currentSemester, studentID, selectedCourse);
        rebuildSpecificStudentComboBox();
        
        
        
        //for student in that course
        //  if student waitlisted
                //enroll student
                //break
                
                
        ArrayList<ScheduleEntry> schedules = ScheduleQueries.getScheduledStudentsByCourse(currentSemester, selectedCourse);
        
        for (ScheduleEntry scheduleEntry: schedules) {
            if (scheduleEntry.getStatus().equals("Waitlisted")) {
                ScheduleQueries.setStatus(scheduleEntry.getStudentID(), "Enrolled", selectedCourse);
                ArrayList<String> name = getNameByID(scheduleEntry.getStudentID());
                String firstName = name.get(0);
                String lastName = name.get(1);
                        
                dropCourseTextArea_Student.append("\n" + firstName + " " + lastName + " has been enrolled in " + selectedCourse);
                CourseQueries.lowerSeats(currentSemester, scheduleEntry.getCourseCode());
                updateCourseDisplay();
                break;
            }
        }
        rebuildSpecificStudentComboBox();
        
        
        
    }//GEN-LAST:event_dropCourseSubmitButton_StudentActionPerformed

    private void selectedStudentComboBox_dropCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedStudentComboBox_dropCourseActionPerformed
        // TODO add your handling code here:
        rebuildSpecificStudentComboBox();
    }//GEN-LAST:event_selectedStudentComboBox_dropCourseActionPerformed

    private void dropCoursePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dropCoursePanelMouseClicked
        // TODO add your handling code here:
        rebuildSpecificStudentComboBox();
    }//GEN-LAST:event_dropCoursePanelMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addCourseLabel;
    private javax.swing.JLabel addSemesterStatusLabel;
    private javax.swing.JButton addSemesterSubmitButton;
    private javax.swing.JTextField addSemesterTextfield;
    private javax.swing.JButton changeSemesterButton;
    private javax.swing.JTextField courseCodeTextField;
    private javax.swing.JTextField courseDescriptionTextField;
    private javax.swing.JButton courseSubmitButton;
    private javax.swing.JComboBox<String> currentSemesterComboBox;
    private javax.swing.JLabel currentSemesterLabel;
    private javax.swing.JButton displayButton_displayCourseEnrollments;
    private javax.swing.JTextArea displayCourseEnrollmentsTextArea;
    private javax.swing.JTextArea displayCoursesTextArea;
    private javax.swing.JButton displayScheduleButton;
    private javax.swing.JTextArea displayScheduleTextArea;
    private javax.swing.JButton dropCourseButton_Admin;
    private javax.swing.JComboBox<String> dropCourseComboBox_Admin;
    private javax.swing.JComboBox<String> dropCourseComboBox_Student;
    private javax.swing.JTabbedPane dropCoursePanel;
    private javax.swing.JButton dropCourseSubmitButton_Student;
    private javax.swing.JTextArea dropCourseTextArea_Admin;
    private javax.swing.JTextArea dropCourseTextArea_Student;
    private javax.swing.JTextArea dropTextArea;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JLabel scheduleCoursesLabel;
    private javax.swing.JButton scheduleCoursesSubmitButton;
    private javax.swing.JLabel scheduleCoursesSuccessLabel;
    private javax.swing.JSpinner seatsSpinner;
    private javax.swing.JComboBox<String> selectCourseComboBox;
    private javax.swing.JComboBox<String> selectStudentComboBox_displaySchedule;
    private javax.swing.JComboBox<String> selectStudentComboBox_dropStudent;
    private javax.swing.JComboBox<String> selectStudentComboBox_scheduleCourses;
    private javax.swing.JComboBox<String> selectedCourseComboBox_DisplayCourseEnrollments;
    private javax.swing.JComboBox<String> selectedStudentComboBox_dropCourse;
    private javax.swing.JLabel studentAddedLabel;
    private javax.swing.JTextField studentIDTextField;
    private javax.swing.JButton studentSubmitButton;
    private javax.swing.JButton submitButton_dropStudent;
    // End of variables declaration//GEN-END:variables
}
